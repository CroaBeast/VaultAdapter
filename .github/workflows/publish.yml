name: Package & Release Plugin (Gradle)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [ created ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build shadowJar

      - name: Upload plugin artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Plugin
          path: |
            build/libs/${{ github.event.repository.name }}-*.jar

      - name: Get Plugin Version from Gradle
        id: version
        run: |
          VERSION=$(./gradlew -q properties | grep '^version:' | awk '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Borra release/tag duplicados si existe el mismo tag
      - name: Delete existing GitHub release (if exists)
        run: |
          RELEASE_ID=$(gh release view ${{ env.VERSION }} --json id -q '.id' || echo "")
          if [ -n "$RELEASE_ID" ]; then
            echo "Deleting existing release..."
            gh release delete ${{ env.VERSION }} --yes
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete existing tag (if exists)
        run: |
          if git rev-parse "${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Deleting existing tag..."
            git tag -d ${{ env.VERSION }}
            git push origin :refs/tags/${{ env.VERSION }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Prepara el JAR sombrado como "latest" para el Release
      - name: Rename & Upload Latest Release artifact
        run: |
          SHADOW_JAR=$(ls build/libs/${{ github.event.repository.name }}-*all.jar | head -n 1)
          if [ -z "$SHADOW_JAR" ]; then
            echo "Shadow JAR wasn't found (*-all.jar)."
            exit 1
          fi
          cp "$SHADOW_JAR" build/libs/${{ github.event.repository.name }}-latest.jar

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            build/libs/${{ github.event.repository.name }}-latest.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Maven repository
        uses: actions/checkout@v4
        with:
          repository: CroaBeast/repo
          path: maven-repo
          token: ${{ secrets.MAVEN_DEPLOY_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Deploy to Maven repository
        run: |
          ART=${{ github.event.repository.name }}
          VER=${{ env.VERSION }}
          BASE_DIR=maven-repo/me/croabeast/${ART}/${VER}
          mkdir -p "$BASE_DIR"

          cp build/libs/${ART}-${VER}.jar "$BASE_DIR"/  || true
          
          cp build/libs/${ART}-${VER}-sources.jar "$BASE_DIR"/ || true
          cp build/libs/${ART}-${VER}-javadoc.jar  "$BASE_DIR"/ || true

          cat > "$BASE_DIR/${ART}-${VER}.pom" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <project xmlns="http://maven.apache.org/POM/4.0.0"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>me.croabeast</groupId>
            <artifactId>${ART}</artifactId>
            <version>${VER}</version>
            <packaging>jar</packaging>
            <name>${ART}</name>
            <description>${ART}</description>
          </project>
          EOF

          META_DIR=maven-repo/me/croabeast/${ART}
          mkdir -p "$META_DIR"
          cat > "$META_DIR/maven-metadata.xml" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <metadata>
            <groupId>me.croabeast</groupId>
            <artifactId>${ART}</artifactId>
            <versioning>
              <latest>${VER}</latest>
              <release>${VER}</release>
              <versions>
                <version>${VER}</version>
              </versions>
              <lastUpdated>$(date +%Y%m%d%H%M%S)</lastUpdated>
            </versioning>
          </metadata>
          EOF

          cd maven-repo
          git add .
          git commit -m "Deploy ${ART} ${VER}"
          git push
